#include "client.h"


USER_INFOR m_my_infor;

  //发送包
  PACK m_pack_send   [MAX_CHAR]; 
  int  m_send_num;

  //接收到的各种包
  PACK m_pack_recv_friend_see   [MAX_PACK_CONTIAN];
  PACK m_pack_recv_chat         [MAX_PACK_CONTIAN];
  PACK m_pack_recv_send_file    [MAX_PACK_CONTIAN];
  PACK m_pack_recv_file_mes     [MAX_PACK_CONTIAN];
  PACK m_pack_recv_file         [MAX_PACK_CONTIAN];
  PACK m_pack_recv_friend_add_agree;

  int m_recv_num_friend_see;
  int m_recv_num_chat;
  int m_recv_num_send_file;
  int m_recv_num_file_mes;
  int m_recv_num_file;
  int m_print_mes_flag;
  
  /****************************************************/
  int m_flag_group_create;
  int m_flag_group_join ;
  int m_flag_group_del  ;
  int m_flag_print_mes;
  int m_flag_print_recorde;

  /****************************************************/
  PRINT_MES m_print_mes[10];
  int m_print_mes_num;

  //定义套接字，IP，端口
  int sockfd;

  /* char *IP = "192.168.1.43"; */
  /* char *IP = "192.168.3.210"; */
  char *IP = "192.168.122.1";
  short PORT = 4057;
  typedef struct sockaddr SA; 

  //定义锁参数
  pthread_mutex_t  mutex_local_user;
  pthread_mutex_t  mutex_recv_file;

int FLAG = 0; 



//主函数
int main(int argc, char const *argv[])
  {
      
      //关闭CTRL+C 
      signal(SIGINT,sig_close);                                                                                                                                       
      //启动并连接服务器
      init();
      
      //判断是否登陆成功
      if(login_menu() == 0)
          return 0;   
      
      //开启线程
      init_clien_pthread();
      
      //主菜单
      main_menu();
      return 0;
  }

//创建套接字，并和服务器创建连接
void init()
{
    //创建套接字
    sockfd = socket(AF_INET,SOCK_STREAM,0);
    
    //初始化
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons(PORT);
    addr.sin_addr.s_addr = inet_addr(IP);
    
    //连接
    if(connect(sockfd,(SA*)&addr,sizeof(addr))==-1){
        perror("无法连接到服务器");
        printf("客户端启动失败\n");
        exit(-1);
    }
    printf("客户端启动成功\n");
}
 
 
//根据发来数据包及时更新
//好友状态
void *deal_statu(void *arg)
{
    int i;
    while(1)
    {
        pthread_mutex_lock(&mutex_local_user); 
        for(i=1;i<=m_recv_num_friend_see;i++)
        {
            change_statu(m_pack_recv_friend_see[i]);
        }
        m_recv_num_friend_see = 0;
        pthread_mutex_unlock(&mutex_local_user); 
        usleep(1); 
    }
}
 
 
//一直接收服务器发来的包
//并把包存储到数组当中
void *clien_recv_thread(void *arg)
{
    PACK pack_t;
    pthread_t pid_send_file;
    //始终接收包
    while(1)
    {
        //接收包
        if(recv(sockfd,&pack_t,sizeof(PACK),0) < 0){
            my_err("recv",__LINE__);
        }
        
        //上锁
        pthread_mutex_lock(&mutex_local_user); 
        
        //-------------------------------------------
        //统计好友消息
        for(int i=1 ;i<= m_my_infor.friends_num;i++)
        {
            if(strcmp(m_my_infor.friends[i].name,pack_t.data.send_name) == 0)
            {
                m_my_infor.friends[i].mes_num++;
                break;
            }
        }
        //--------------------------------------------
        
        //对不同的包进行处理
        switch(pack_t.type)
        {
            //添加好友提醒
            case AGREE:
                m_pack_recv_friend_add_agree = pack_t;
                add_friend_agree(); 
                break;
            //查看好友
            case FRIEND_SEE:
                m_pack_recv_friend_see[++m_recv_num_friend_see] = pack_t;
                break;
            //创建群聊
            case GROUP_CREATE:
                m_flag_group_create = pack_t.data.mes[0];
                break;
            //加入群聊
            case GROUP_JOIN:
                m_flag_group_join   = pack_t.data.mes[0];
                break;
            //解散群聊
            case GROUP_DEL:
                m_flag_group_del    = pack_t.data.mes[0];
                break;
            //私聊
            case CHAT_ONE:
                m_pack_recv_chat[++m_recv_num_chat]  = pack_t;
                break;
            //群聊
            case CHAT_MANY:
                m_pack_recv_chat[++m_recv_num_chat]  = pack_t;
                break;
            

            //case SEND_FILE:
              //  m_pack_recv_send_file[++m_recv_num_send_file]   = pack_t;
                //break; 
            case FILE_SEND_BEGIN_RP:
                 pthread_create(&pid_send_file,NULL,pthread_send_file,(void *)pack_t.data.mes);
                break; 
            case FILE_SEND_STOP_RP:
                m_pack_recv_file_mes[++m_recv_num_file_mes]             = pack_t;
                //printf("\n\nm_pack_recv_file_mes[++m_recv_num_file_mes] 1= %s\n\n",m_pack_recv_file_mes[++m_recv_num_file_mes].data.mes); 
                break;
            case FILE_RECV_BEGIN:
                m_pack_recv_file_mes[++m_recv_num_file_mes]             = pack_t;
                /* printf("pack = %s",pack_t.data.mes+NUM_MAX_DIGIT); */
                /* printf("\n\nm_pack_recv_file_mes[++m_recv_num_file_mes] 2= %s\n\n",m_pack_recv_file_mes[++m_recv_num_file_mes].data.mes); */
                break;
           

            //接收文件
            case FILE_RECV:
                pthread_mutex_lock(&mutex_recv_file); 
                m_pack_recv_file[++m_recv_num_file]                     = pack_t;                
                //printf("\n\nm_pack_recv_file_mes[++m_recv_num_file_mes] 3= %s\n\n",m_pack_recv_file_mes[++m_recv_num_file_mes].data.mes); 
                pthread_mutex_unlock(&mutex_recv_file);
                break; 
            case FILE_RECV_STOP_RP:
                m_pack_recv_file_mes[++m_recv_num_file_mes]             = pack_t;
                //printf("\n\nm_pack_recv_file_mes[++m_recv_num_file_mes] 4= %s\n\n",m_pack_recv_file_mes[++m_recv_num_file_mes].data.mes); 
                break;
            //消息记录
            case MES_RECORD:
                PACK *pack_record = (PACK *)malloc(sizeof(PACK));
                memcpy(pack_record,&pack_t,sizeof(PACK));
                print_mes_record(pack_record);
                break;
        }
        //解锁
        pthread_mutex_unlock(&mutex_local_user); 
        usleep(1); 
    }
}
 
 
//开启线程
void init_clien_pthread()
{
    pthread_t pid_deal_statu,pid_recv,pid_recv_file;
    //收包处理线程
    pthread_create(&pid_deal_statu,NULL,deal_statu,NULL);
    //实时接收包线程
    pthread_create(&pid_recv,NULL,clien_recv_thread,NULL);
} 
 
 
//主菜单
int main_menu()
{
    char choice_t[100];
    int chioce;
    do
    {
        //更新信息
        get_status_mes();
        //printf("pack num_chat:%d\n", m_recv_num_chat);
        //打印主菜单
        print_main_menu();
        scanf("%s",choice_t);
        chioce = get_choice(choice_t);
        switch(chioce)
        {  
            case 1:
                //查看好友
                friends_see();
                break;
            case 2:
                //添加好友
                add_friend();
                break;
            case 3:
                //删除好友
                del_friend();
                break;
            case 4:
                //查看群组
                group_see();
                break;
            case 5:
                //创建群组
                group_create();
                break;
            case 6:
                //加入群组
                group_join();
                break;
            case 7:
                //退出群组
                group_qiut();
                break;
            case 8:
                //解散群组
                group_del();
                break;
            case 9:
                //私聊
                send_mes_to_one();
                break;
            case 10:
                //群聊
                send_mes_to_group();
                break;
            case 11:
                //发送文件
                send_file();
                break;
            case 12:
                //文件消息盒子
                file_mes_box();
                break;
            case 13:
                //消息记录
                mes_record();
            default:
                break;
        }
    }while(chioce!=0);
    return 0;
}



//界面函数--------------------------------------------------------------------------------------------------------------------------
//登陆菜单
int login_menu(){
    char choice_t[100];
    int chioce;
    do{
        printf("\n*******************************\n");
        printf("        [1].登录            \n");
        printf("        [2].注册            \n");
        printf("        [0].退出                \n");
        printf("*******************************\n");
        printf("你的选择：");
        scanf("%s",choice_t);
        chioce = get_choice(choice_t);
        switch(chioce){  
            //登录
            case 1:
                if(login() == 1)
                    return 1;
                break;
            //注册
            case 2:
                registe();
                break;
            default:
                break;
        }
    }while(chioce!=0);
    return 0;
}
 
//显示聊天信息
void show_mes_smart(char *name  ,char *mes)
{
    time_t timep;
    int number = 10;
    char time1[100];
    int len ; 
    //时间
    time (&timep);
    strcpy(time1,ctime(&timep));
    len = strlen(time1);
    time1[len-5] = '\0'; 

    //确认要打印的聊天信息发送方
    if(m_print_mes_num == number)  {
        for(int i=1;i<=9 ;i++)
            m_print_mes[i] = m_print_mes[i+1];
        strcpy(m_print_mes[number].name,name);
        strcpy(m_print_mes[number].mes,mes);
    }else{
         strcpy(m_print_mes[++m_print_mes_num].name,name);
         strcpy(m_print_mes[m_print_mes_num].mes,mes);
    }
 
    //打印聊天信息
    int i = m_print_mes_num;
    if(strcmp(m_print_mes[i].name,m_my_infor.username) == 0){
            printf("%s\t%s\n",m_print_mes[i].name,time1+10);
            printf("%s\n", m_print_mes[i].mes);
    }else{
            printf("%s\t%s\n",m_print_mes[i].name,time1+10);
            printf("%s\n", m_print_mes[i].mes);
    }

    //刷缓存区
    fflush(stdout);
}
 
 

//定义锁参数
extern pthread_mutex_t  mutex_local_user;
extern pthread_mutex_t  mutex_recv_file;
//好友列表查看
void friends_see()
{
    pthread_mutex_lock(&mutex_local_user);
    printf("***********好友列表*************\n");
    for(int i=1 ;i<=m_my_infor.friends_num ;i++){
        switch(m_my_infor.friends[i].statu){
           case ONLINE:
                printf("  ID[%d]:       %s [ONLINE] ", i,m_my_infor.friends[i].name);
                //好友消息
                if(m_my_infor.friends[i].mes_num)
                    printf("%d messages\n", m_my_infor.friends[i].mes_num);
                else 
                    printf("\n");
                break;
           case DOWNLINE:
                printf("\n  ID[%d]:     %s [DOWNLINE] ", i,m_my_infor.friends[i].name);
                if(m_my_infor.friends[i].mes_num)
                    printf("%d messages\n", m_my_infor.friends[i].mes_num);
                else 
                    printf("\n");
                break;
        }
    }
    printf("\n\n");
    printf("********************************\n");
    pthread_mutex_unlock(&mutex_local_user);  
}
 

//群组信息查看
void group_see()
{
    pthread_mutex_lock(&mutex_local_user);
    
    //获取群信息
    //group_mes_get(m_my_infor);
    
    printf("***********群组列表*************  \n");
    //int i;
    for(int i=1 ;i<=m_my_infor.group_num ;i++){
        printf("  ID[%d]:       %s", i,m_my_infor.group[i]);
    }
    printf("\n\n");
    printf("*************************************** \n");
    /*int choice;
    do{
        printf("[1]查看群成员\t[2]退出\n");
        fflush(stdin);
        scanf("%d",&choice);

        if(choice == 1){
            group_member_see();
        }

        if(choice != 1 && choice != 2){
            printf("请重新输入\n");
        }

    }while(choice != 2 && choice != 1);
    */
    pthread_mutex_unlock(&mutex_local_user);  
}

//查看群成员列表
void group_member_see(){
    int choice;
    do{
        printf("请输入你要查看的群组的序号（输入0退出）：");
        fflush(stdin);
        scanf("%d",&choice);
        
        if(choice != 0){
            get_group_member(choice);

            printf("正在查询.....\n");
            sleep(2);
            printf("\n************群成员列表**************\n");

            for(int i = 1;i <= m_my_infor.group_member_num;i++){
                printf("ID[%d]\t\t%s\n",i,m_my_infor.group_member_name[choice][i]);
            }

            printf("\n**************************************\n");
        }

    }while(choice != 0);
    return;
}

void get_group_member(int n){

}


























 
//主菜单 
void print_main_menu()
{
    printf("\n********************************* \n");
    printf("        [1]显示好友       \n");
    printf("        [2]添加好友       \n");
    printf("        [3]删除好友       \n");
    printf("        [4]显示群组         \n");
    printf("        [5]创建群组         \n");
    printf("        [6]加入群组         \n");
    printf("        [7]退出群组         \n");
    printf("        [8]解散群组         \n");
    printf("        [9]私聊        \n");
    printf("        [10]群聊      \n");
    printf("        [11]发文件          \n");
    printf("        [12]文件消息盒子 %d \n",m_recv_num_file_mes);
    printf("        [13]查看群消息记录\n");
    printf("        [0]退出                 \n");
    printf("*********************************\n");
    printf("选择：");
}


//功能函数--------------------------------------------------------------------------------------------------------------------------
//向服务端发送登陆信息
int send_login(char username_t[],char password_t[])
{
    PACK recv_login_t;
    int login_judge_flag = 0;
    
    //发送包
    send_pack(LOGIN,username_t,"server",password_t);
     
    if(recv(sockfd,&recv_login_t,sizeof(PACK),0) < 0){
        my_err("recv",__LINE__);
    }
    
    //接收服务器返回的登录消息
    login_judge_flag = recv_login_t.data.mes[0] - 48;
    //printf("---------recv_login_t.data.mes[0] = %d\n",recv_login_t.data.mes[0]);
    return login_judge_flag;
}
 

//根据输入信息向客户端发送登陆请求
//并根据返回内容，提示用户
int login()
{
    int login_flag = 0;
    char username_t [MAX_CHAR];
    char password_t [MAX_CHAR];
    
    printf("请输入用户名:\n");
    scanf("%s",username_t);
    printf("请输入密码：\n");
    scanf("%s",password_t);
 
    login_flag = send_login(username_t,password_t);
    
    //printf("--------------------------------------%d\n",login_flag);

    if(login_flag ==  2){
        printf("用户未注册.\n");
        return 0;
    }   
    if(login_flag ==  3 ){
        printf("用户已登录 .\n");
        return 0;
    }  
    if(login_flag ==  0) {
        printf("密码不匹配.\n");
        return 0;
    }
    
    //初始化当前登录用户名
    strcpy(m_my_infor.username,username_t);
    printf("登陆成功\n");
    return 1;
}
 
//向服务端发送注册信息
//成功返回0
int send_registe(char username_t[],char password_t[])
{
    PACK recv_registe_t;
    int send_registe_flag;
    
    send_pack(REGISTER,username_t,"server",password_t);
    
    if(recv(sockfd,&recv_registe_t,sizeof(PACK),0) < 0){
        my_err("recv",__LINE__);
    }
    
    send_registe_flag = recv_registe_t.data.mes[0] - 48;
    return send_registe_flag;
}
 
//根据输入信息向客户端发送注册请求
//并根据返回内容，提示用户
void registe()
{
    int flag = 0;
    flag = REGISTER;
    char username_t[MAX_CHAR];
    char password_t[MAX_CHAR];
    
    printf("注册账号:\n");
    scanf("%s",username_t);
    printf("注册密码:\n");
    scanf("%s",password_t);
    if(send_registe(username_t,password_t))
        printf("成功!\n");
    else 
        printf("姓名重复\n");
}  